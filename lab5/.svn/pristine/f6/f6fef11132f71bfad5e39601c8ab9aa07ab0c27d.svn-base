#include "video_card.h"

static vbe_mode_info_t inf_memory;

int set_graphics_mode(uint16_t mode){

  memset(&inf_memory, 0, sizeof(inf_memory));
  
  if (vbe_get_mode_info(mode,&inf_memory) != 0){
    return 1;
  }

  int r;
  struct minix_mem_range mr; /* physical memory range */
  unsigned int vram_base = inf_memory.PhysBasePtr; /* VRAM’s physical addresss */
  unsigned int vram_size=inf_memory.XResolution*inf_memory.YResolution*(inf_memory.BitsPerPixel/8); /* VRAM’s size, but you can use the frame-buffer size, instead */
  void *video_mem; /* frame-buffer VM address */
  struct reg86 r86;

/* Allow memory mapping */
mr.mr_base = (phys_bytes) vram_base;
mr.mr_limit = mr.mr_base + vram_size;

if( OK != (r = sys_privctl(SELF, SYS_PRIV_ADD_MEM, &mr)))
  panic("sys_privctl (ADD_MEM) failed: %d\n", r);

/* Map memory */
video_mem = vm_map_phys(SELF, (void *)mr.mr_base, vram_size);

if(video_mem == MAP_FAILED)
  panic("couldn’t map video memory");

/* Specify the appropriate register values */
memset(&r86, 0, sizeof(r86));	/* zero the structure */

r86.ah = VBE_CALL;
r86.intno = BIOS_VIDEO_CALL;
r86.al = SET_VBE_MODE;
r86.bx = LINER_FRAMEBUFFER | 0x105;

if( sys_int86(&r86) != OK ) {
  printf("\tvg_exit(): sys_int86() failed \n");
  return 1;
}
return 0;

}
