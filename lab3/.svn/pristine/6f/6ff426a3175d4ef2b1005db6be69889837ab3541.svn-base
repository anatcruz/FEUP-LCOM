#include <lcom/lcf.h>

#include <lcom/lab3.h>

#include <stdbool.h>
#include <stdint.h>
#include "keyboard.h"
#include "kbc.h"

#define BREAK_ESC_KEY 0x81
extern bool two_byte_scancode;
extern uint8_t bytes[2];


bool esc_key_pressed = false;

int main(int argc, char *argv[]) {
  // sets the language of LCF messages (can be either EN-US or PT-PT)
  lcf_set_language("EN-US");

  // enables to log function invocations that are being "wrapped" by LCF
  // [comment this out if you don't want/need it]
  lcf_trace_calls("/home/lcom/labs/lab3/trace.txt");

  // enables to save the output of printf function calls on a file
  // [comment this out if you don't want/need it]
  lcf_log_output("/home/lcom/labs/lab3/output.txt");

  // handles control over to LCF
  // [LCF handles command line arguments and invokes the right function]
  if (lcf_start(argc, argv))
    return 1;

  // LCF clean up tasks
  // [must be the last statement before return]
  lcf_cleanup();

  return 0;
}

int keyboard_user_callback(bool make, uint8_t size, uint8_t *bytes) {
  printf("Hi\n");
  if (bytes[0] == BREAK_ESC_KEY) {
    esc_key_pressed = true;
  }

  return kbd_print_scancode(make, size, bytes);
}

int(kbd_test_scan)() {

  if (keyboard_ih_subscribe() != 0)
    return 1;
   
  int r, ipc_status;
  message msg;

  while (!esc_key_pressed)
  { /*You may want to use a different condition*/ /*Get a request message.*/
    if ((r = driver_receive(ANY, &msg, &ipc_status)) != 0)
    {
      printf("driver_receive failed with: %d", r);
      continue;
    }
    if (is_ipc_notify(ipc_status))
    { /*received notification*/
      //printf("HI\n");
      switch (_ENDPOINT_P(msg.m_source))
      {
      case HARDWARE: /*hardware interrupt notification*/
        if (msg.m_notify.interrupts & KEYBOARD_MASK)
        {     /*subscribed interrupt*/
          kbc_ih();
        }
        break;
      default:
        break; /*no other notifications expected: do nothing*/
      }
    }
    else
    { /*received a standard message, not a notification*/ /*no standard messages expected: do nothing*/
    }
  }

  return keyboard_ih_unsubscribe();
}
//Falta testar!!!!
int(kbd_test_poll)() {
  
  uint8_t scancode=0;
  
  while (!esc_key_pressed){
      kbc_ih();
      if (scancode == KEYBOARD_TWO_BYTES_MSB) {
        two_byte_scancode = true;
        
    }

    if (two_byte_scancode) {
        bool make = (scancode & 0x80) == 0;
        bytes[0] = KEYBOARD_TWO_BYTES_MSB;
        bytes[1] = scancode;
        kbd_print_scancode(make,2,bytes);
        break;
    } else {
        bool make = (scancode & 0x80) == 0;
        bytes[0] = scancode;
        kbd_print_scancode(make,1,bytes);
        break;
    }
  

  }

  keyboard_ih_enable();
  return 0;
}

int(kbd_test_timed_scan)(uint8_t n) {
  /* To be completed by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}


