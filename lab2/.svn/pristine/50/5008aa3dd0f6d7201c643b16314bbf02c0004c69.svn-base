#include <lcom/lcf.h>
#include <lcom/timer.h>

#include <stdint.h>

#include "i8254.h"

uint8_t get_bits(uint8_t input, uint8_t lower_bit, uint8_t upper_bit) {
    if (lower_bit >= upper_bit || lower_bit < 0 || upper_bit > 8)
        return 255;

    input <<= (8 - upper_bit);
    input >>= (8 - upper_bit);

    input >>= lower_bit;

    return input;
}

uint8_t set_bits(uint8_t input, uint8_t lower_bit, uint8_t upper_bit, uint8_t payload) {
    if (lower_bit >= upper_bit || lower_bit < 0 || upper_bit > 8)
        return 255;
    // if (pow(2, upper_bit - lower_bit) <= payload)
    //     return 255;
    
    uint8_t bitmask = 1;//Setting up the bitmask
    for (uint8_t i = 1; i < (upper_bit - lower_bit); i++) {
        bitmask <<= 1;
        bitmask &= 1;
    }
    bitmask <<= lower_bit;

    payload <<= lower_bit;

    input &= (~bitmask);
    input |= payload;

    return input;
}

int (timer_set_frequency)(uint8_t timer, uint32_t freq) {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

int (timer_subscribe_int)(uint8_t *bit_no) {
    /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

int (timer_unsubscribe_int)() {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}

void (timer_int_handler)() {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);
}

int (timer_get_conf)(uint8_t timer, uint8_t *st) {
  /* To be implemented by the students */
  int port;

  switch (timer)
  {
  case 0:
    port = TIMER_0;
    break;

  case 1:
    port = TIMER_1;
    break;
  
  case 2:
    port = TIMER_2;
    break;

  default:
    return 1;
  }

  uint8_t command = 0b00000000;

  command = set_bits(command, 6, 8, 0b11); // Read-Back Command

  command = set_bits(command, 5, 6, 0b1); // We don't want count

  command = set_bits(command, timer + 1, timer + 2, 0b1); // Only one counter

  printf("(timer_get_conf) call: timer-> %d, command-> %x\n", timer, command);

  if (sys_outb(TIMER_CTRL, command) == EINVAL)
    return 1;
  
  uint8_t answer;

  if (util_sys_inb(port, &answer) != 0)
    return 1;

  *st = answer;
  return 0;
  
}

int (timer_display_conf)(uint8_t timer, uint8_t st,
                        enum timer_status_field field) {
  /* To be implemented by the students */
  printf("%s is not yet implemented!\n", __func__);

  return 1;
}
